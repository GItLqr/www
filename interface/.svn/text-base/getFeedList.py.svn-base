#-*- coding: utf8 -*-
import sys
import web
import logging
import logging.config
import json
import conf
import chardet
import copy

import module.feedList as feedList
import module.feedContent as feedContent
import module.feedRecommend as feedRecommend
import module.common

# getLogger
logger = logging.getLogger() 

# gobal vars
PER_PAGE_FEED_COUNT = 10
        
###############################################################################
# 得到首页列表
class clsGetFeedList:        
    def __init__ ( self ):
        logger.debug( self.__class__.__name__ + ' begin...' )
        web.header( 'Content-Type', 'text/html;charset=utf-8' )

    def __del__ ( self ):
        logger.debug( self.__class__.__name__ + ' end!' )
        
    def getInput ( self ):
        try:
            inPars = web.input( user_id='0', \
                                begin_time='0', \
                                count='20', \
                                before='1', \
                                la='0', lo='0', \
                                area='',\
                                nocache='0' )
            logger.debug( 'input: %s', str(inPars) ) 
                                
            self.uid = inPars[ 'user_id' ].encode( 'utf8' )
            self.begin_time = int(inPars[ 'begin_time' ])
            self.count = int(inPars[ 'count' ])
            self.before = int(inPars[ 'before' ])
            self.nocache = int(inPars[ 'nocache' ])
            self.la = inPars[ 'la' ]
            self.lo = inPars[ 'lo' ]
            self.area = inPars[ 'area' ]

            if self.count <= 0 :
                self.count = 20
            
            return True ;
        except:
            logger.error( "input invalid, %s, %s" ,sys.exc_info()[0] , sys.exc_info()[1] )
            return False

    def faildOutput ( self, err, msg ):
        output = {'status': err, 'msg' : msg}
        return  json.dumps( output, ensure_ascii=False )
      
    def GET( self, *args ):
        # get input params
        if not self.getInput():
            return self.faildOutput( -1, 'params invalid')
           
        # get feedid list
        self.area = self.area if self.area != '' else module.common.getCityName(self.la,self.lo)
        logger.debug( 'areaName=%s', self.area )

        # 如果刷最新的
        if not self.before:
            (feedid_list, minifeed_list) = self.getNewFeedList()
 
        # 如果刷历史
        else:
            (feedid_list, minifeed_list) = self.getHistoryFeedList()

        first_update_time = 0
        last_update_time = 0
        if len(feedid_list) > 0:
            first_update_time = feedid_list[0][0]
            last_update_time = feedid_list[-1][0]
        
        output = {}
        output['status'] = 0
        output['msg' ]  = ''
        output['first_update_time'] = first_update_time
        output['last_update_time'] = last_update_time
        output['count'] = len( minifeed_list )
        output['lists'] = minifeed_list

        return json.dumps( output, ensure_ascii=False )

    # 刷最新的feed
    def getNewFeedList ( self ):
        feedid_list = feedList.getFrontpageFeedIdList( self.area, self.nocache ) 
        feedid_list.sort( lambda x,y: cmp(y[0],x[0]) )
    
        print '================================================'
        print 'all frontpage feedlist..'
        print json.dumps( [str(f[0])+':'+f[1] for f in feedid_list], indent=4 )

        # 取begin_time以后的最新的PER_PAGE_FEED_COUNT条feed
        feedid_list = clsGetFeedList.getSubFeedIdList( feedid_list, self.begin_time, PER_PAGE_FEED_COUNT, False )

        if len(feedid_list) <= PER_PAGE_FEED_COUNT :
            logger.debug('here ok')
            feedid_list = feedid_list
        else:
            logger.debug('here ok1')
            feedid_list = feedid_list[0:PER_PAGE_FEED_COUNT]

        print '================================================'
        print 'the frontpage feedlist..'
        print json.dumps( [str(f[0])+':'+f[1] for f in feedid_list], indent=4 )

        # 得到minifeed
        minifeed_list = clsGetFeedList.getMiniFeeds( feedid_list, self.nocache )

        # 如果最新的数量不足PER_PAGE_FEED_COUNT条，则取推荐
        print '================================================'
        print 'begin get recommend....'
        if len(feedid_list) < PER_PAGE_FEED_COUNT :
            # 得到minifeed_list中的所有data id，传入给推荐，用于去重
            existing_idlist = clsGetFeedList.getMiniFeedAllDataIds( minifeed_list )

            # 得到推荐
            (recommend_feedid_list, recommend_minifeed_list) = feedRecommend.getRecommendFeedList( self.uid, PER_PAGE_FEED_COUNT-len(feedid_list), existing_idlist )
            if recommend_feedid_list != None and recommend_minifeed_list != None:
                minifeed_list = recommend_minifeed_list + minifeed_list
                feedid_list = recommend_feedid_list + feedid_list

        # 转换image节点 
        clsGetFeedList.transMiniFeedDataImageNodes( minifeed_list)

        return (feedid_list, minifeed_list)

    # 得到历史feed
    def getHistoryFeedList ( self ):
        feedid_list = feedList.getFrontpageFeedIdList( self.area, self.nocache ) 
        recommend_feedid_list = feedRecommend.getHistoryRecommendFeedIdList( self.uid )
        
        feedid_list = feedid_list+recommend_feedid_list
        feedid_list.sort( lambda x,y: cmp(y[0],x[0]) )

        print '================================================'
        print json.dumps( [str(f[0])+':'+f[1] for f in feedid_list], indent=4 )
 
        feedid_list = clsGetFeedList.getSubFeedIdList( feedid_list, self.begin_time, self.count, self.before )
        print '================================================'
        print json.dumps( [str(f[0])+':'+f[1] for f in feedid_list], indent=4 )

        minifeed_list = clsGetFeedList.getMiniFeeds( feedid_list, self.nocache )
        
        # 转换image节点 
        clsGetFeedList.transMiniFeedDataImageNodes( minifeed_list)
        
        return (feedid_list, minifeed_list)

    # 二分法查找update_time的起始位置
    @staticmethod
    def getFeedListBeginIndexByUpdateTime ( feedid_list, update_time, before ):    
        # 向前
        def getBeginIndexByUpdateTime_Before ( feedid_list, sp, ep, update_time ):
            if sp > ep :
                return -1            
            elif sp == ep :
                if update_time > feedid_list[sp][0]:
                    return sp
                else:
                    return sp+1
            elif sp == ep-1 :
                if update_time > feedid_list[sp][0] :
                    return sp
                else:
                    if update_time > feedid_list[ep][0] :
                        return ep
                    else:
                        return ep+1
            else:            
                i = (sp+ep)/2
                if update_time <= feedid_list[i][0] :
                    return getBeginIndexByUpdateTime_Before( feedid_list, i+1, ep, update_time )
                else:
                    return getBeginIndexByUpdateTime_Before( feedid_list, sp, i, update_time )

        # 向后
        def getBeginIndexByUpdateTime_After ( feedid_list, sp, ep, update_time ):
            if sp > ep :
                return -1            
            elif sp == ep :
                if update_time < feedid_list[ep][0]:
                    return ep
                else:
                    return ep-1
            elif sp == ep-1 :
                if update_time < feedid_list[ep][0] :
                    return ep
                else:
                    if update_time < feedid_list[sp][0] :
                        return sp
                    else:
                        return sp-1
            else:            
                i = (sp+ep)/2
                if update_time >= feedid_list[i][0] :
                    return getBeginIndexByUpdateTime_After( feedid_list, sp, i-1, update_time )
                else:
                    return getBeginIndexByUpdateTime_After( feedid_list, i, ep, update_time )
           
        if before:
            return getBeginIndexByUpdateTime_Before( feedid_list, 0, len(feedid_list)-1, update_time )
        else:
            return getBeginIndexByUpdateTime_After( feedid_list, 0, len(feedid_list)-1, update_time )

    # 根据count截取一定得feedid
    @staticmethod
    def getSubFeedIdList ( feedid_list, begin_time, count, before ):
        if count <= 0:
            return []
        
        feedid_count = len(feedid_list)
        s = 0
        e = 0

        if before:
            if begin_time <= 0 :
                s = 0
                e = count
            else:
                s = clsGetFeedList.getFeedListBeginIndexByUpdateTime( feedid_list, begin_time, before )
                e = s+count
                s = 0 if s < 0 else s
                e = feedid_count if e > feedid_count else e

            # 结尾的相同时间一起返回
            i = e
            for i in xrange( e, feedid_count+1 ) :
                if i == feedid_count or feedid_list[e-1][0] != feedid_list[i][0] :
                    break

            e = i

        else:
            if begin_time <= 0 :
                s = 0
                e = count
            else:
                e = 1+clsGetFeedList.getFeedListBeginIndexByUpdateTime( feedid_list, begin_time, before )
                s = e-count
                s = 0 if s < 0 else s
                e = feedid_count if e > feedid_count else e
                
            # 结尾的相同时间一起返回
            i = s-1
            for i in xrange( s-1, -2, -1 ) :
                if i == -1 or feedid_list[s][0] != feedid_list[i][0] :
                    break

            s = i+1

        return feedid_list[s:e]
        
    # 取minifeed
    @staticmethod
    def getMiniFeeds ( feedid_list, nocache ):
        # feedid_list 格式为:
        # [[update_time,feedid,dataid,visibile],...]
        # 如果dataid有效，则返回的数据中，要根据dataid对data节点下面的子节点进行过滤
        keys = set([i[1] for i in feedid_list])
        minifeeds = feedContent.getMiniFeeds( keys, nocache )
        minifeeds = feedContent.getMiniFeedsDataContent( minifeeds )
        minifeed_list = []

        for feedid_fds in feedid_list :
            feedid = feedid_fds[1]
            dataid = feedid_fds[2] 
            
            # 取对应的minifeed
            minifeed = minifeeds[feedid]
            if minifeed == None:
                continue

            newMiniFeed = None
            if dataid == '':
                newMiniFeed = minifeed 
            else:
                # 需要根据dataid进行过滤
                newMiniFeed = copy.copy( minifeed )
                newMiniFeed['data']= []
                for minifeed_data_item in minifeed['data'] :
                    if minifeed_data_item.get('id') == dataid :
                        newMiniFeed['data'].append( minifeed_data_item )
                        break

                if len(newMiniFeed['data']) <= 0 :
                    continue
                    
            # 加入到list
            minifeed_list.append( newMiniFeed )

        return minifeed_list

    # 得到minifeed list下面的所有data ids
    @staticmethod
    def getMiniFeedAllDataIds ( minifeed_list ):
        ids = []
        for minifeed in minifeed_list :
            for minifeed_data_item in minifeed['data'] :
                ids.append( minifeed_data_item['id'] )

        print '=========================================='
        print str(ids)
        return ids

    # 转换feed data节点下面的imageData字段
    @staticmethod
    def transMiniFeedDataImageNodes ( minifeed_list ):
        logger.debug( 'transMiniFeedDataImageNodes...' )
        count = 0
        for minifeed in minifeed_list :
            # 对data里面的imageData节点做转换
            for minifeed_data_item in minifeed['data'] :
                clsGetFeedList.transImageNodes( minifeed_data_item, '', 2 )
                count += 1
        logger.debug( 'transMiniFeedDataImageNodes end, nodes=%d' , count )
            
    # 转换feed data节点下面的imageData字段
    @staticmethod
    def transImageNodes( item, view_type, trans_depth = 3 ):
        # 将imageData节点，替换成image节点
        def imageDataNodeToImageNode ( imageData, view_type ):
            if imageData == None or not isinstance( imageData, dict ) :
                return None
            image = imageData.get( view_type )
            if image == None:
                return imageData.get( 'default' )
            else:
                return image
        #end
        # 将imageData节点，替换成image节点
        def imageDataListNodeToImageListNode ( imageDataList, view_type ):
            if imageDataList == None or not isinstance( imageDataList, list ) :
                return None

            imageList = []
            for imageData in imageDataList :
                image = imageData.get( view_type )
                if image == None:
                    image = imageData.get( 'default' )
                if image != None:
                    imageList.append( image )

            return imageList
        #end

        if not isinstance( item, dict ):
            return
        
        image = imageDataNodeToImageNode( item.get( 'imageData' ), view_type )
        if image != None :
            item['imageData'] = image

        imageList = imageDataListNodeToImageListNode( item.get( 'imageDataList' ), view_type )
        if imageList != None :
            item['imageDataList'] = imageList

        if trans_depth <= 1 :
            return

        for key,value in item.iteritems():
            if not isinstance( value, list ):
                continue
            for list_item in value :
                clsGetFeedList.transImageNodes( list_item, view_type, trans_depth-1 )
                

###############################################################################
# 得到用户收藏页列表
class clsGetUserFeedList:        
    def __init__ ( self ):
        logger.debug( self.__class__.__name__ + ' begin...' )
        web.header( 'Content-Type', 'text/html;charset=utf-8' )

    def __del__ ( self ):
        logger.debug( self.__class__.__name__ + ' end!' )
        
    def getInput ( self ):
        try:
            inPars = web.input( user_id='0', begin_time='0', count='20', before='1', nocache='0' ) 
            self.uid = inPars.get( 'user_id' ).encode( 'utf8' )
            self.begin_time = int(inPars.get( 'begin_time' ))
            self.count = int(inPars.get( 'count' ))
            self.before = int(inPars.get( 'before' ))
            self.nocache = int(inPars.get( 'nocache' ))

            if self.count <= 0 :
                self.count = 20
            
            logger.debug( 'input: uid=%s, begin_time=%d, count=%d, before=%d, nocache=%d', 
                                self.uid, self.begin_time, self.count, self.before, self.nocache ) 
            return True ;
        except:
            logger.error( "input invalid, %s, %s" ,sys.exc_info()[0] , sys.exc_info()[1] )
            return False

    def faildOutput ( self, err, msg ):
        output = {'status': err, 'msg' : msg}
        return  json.dumps( output, ensure_ascii=False )
      
    def GET( self, *args ):
        # get input params
        if not self.getInput():
            return self.faildOutput( -1, 'params invalid')
           
        feedid_list = feedList.getUserFeedIdList( self.uid, self.nocache ) 
        feedid_list.sort( lambda x,y: cmp(y[0],x[0]) )

        print '================================================'
        print json.dumps( feedid_list, indent=4 )
 
        feedid_list = clsGetFeedList.getSubFeedIdList( feedid_list, self.begin_time, self.count, self.before )
        #print '================================================'
        #print json.dumps( feedid_list, indent=4 )

        minifeed_list = clsGetFeedList.getMiniFeeds( feedid_list, self.nocache )

        first_update_time = 0
        last_update_time = 0
        if len(feedid_list) > 0:
            first_update_time = feedid_list[0][0]
            last_update_time = feedid_list[-1][0]
        
        output = {}
        output['status'] = 0
        output['msg']  = ''
        output['first_update_time'] = first_update_time
        output['last_update_time'] = last_update_time
        output['count'] = len( minifeed_list )
        output['lists'] = minifeed_list

        return json.dumps( output, ensure_ascii=False )

