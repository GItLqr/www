#-*- coding: utf8 -*-
import sys
import web
import logging
import logging.config
import json
import conf
import chardet
import copy
import time
import random

import module.feedList as feedList
import module.feedContent as feedContent
import module.feedRecommend as feedRecommend
import module.common
import module.local_theater as local_theater
import module.weather as weather

# getLogger
logger = logging.getLogger() 

# gobal vars
PER_PAGE_FEED_COUNT = 10
        
###############################################################################
# 得到首页列表
class clsGetFrontpage:        
    def __init__ ( self ):
        self.__bt__ = time.time()
        logger.debug( self.__class__.__name__ + ' begin...' )
        web.header( 'Content-Type', 'text/html;charset=utf-8' )

    def __del__ ( self ):
        spent = (time.time()-self.__bt__)*1000
        if spent >= 3000 :
            logger.warning( self.__class__.__name__ + ' end! Spent=%d', spent  )
        else:
            logger.debug( self.__class__.__name__ + ' end! Spent=%d', spent )
        
    def getInput ( self ):
        try:
            inPars = web.input( user_id='0', \
                                begin_time='0', \
                                la='0', lo='0', \
                                area='',\
                                nocache='0', \
                                movie='', \
                                theater1 = '', \
                                theater2 = '' )
            logger.debug( 'input: %s', str(inPars) ) 
                                
            self.uid = inPars[ 'user_id' ].encode( 'utf8' )
            self.begin_time = int(inPars[ 'begin_time' ])
            self.nocache = int(inPars[ 'nocache' ])
            self.la = inPars[ 'la' ]
            self.lo = inPars[ 'lo' ]
            self.area = inPars[ 'area' ]
            self.movieId = inPars['movie']
            self.theaterId1 = inPars['theater1']
            self.theaterId2 = inPars['theater2']

            if self.la != '' and self.la != '0' and self.lo != '' and self.lo != '0' :
                self.nowCity = module.common.getCityName(self.la,self.lo)
            else:
                self.nowCity = ''

            if self.area == '' :
                self.area = self.nowCity            

            return True ;
        except:
            logger.error( "input invalid, %s, %s" ,sys.exc_info()[0] , sys.exc_info()[1] )
            return False

    def faildOutput ( self, err, msg ):
        output = {'status': err, 'msg' : msg}
        return  json.dumps( output, ensure_ascii=False )
      
    def GET( self, *args ):
        # get input params
        if not self.getInput():
            return self.faildOutput( -1, 'params invalid')
           
        minifeed_list = []
        t = time.time()
        minifeed_list += self.getRecommendFeed()
        logger.debug( 'getRecommendFeed Spent=%d', (time.time()-t)*1000 )
        t = time.time()
        minifeed_list += self.getLocalNewsFeed()
        logger.debug( 'getLocalNewsFeed Spent=%d', (time.time()-t)*1000 )
        t = time.time()
        minifeed_list += self.getGlobalNewsFeed()
        logger.debug( 'getGlobalNewsFeed Spent=%d', (time.time()-t)*1000 )
        t = time.time()
        minifeed_list += self.getJWKSFeed()
        logger.debug( 'getJWKSFeed Spent=%d', (time.time()-t)*1000 )
        t = time.time()
        minifeed_list += self.getWeatherFeed()
        logger.debug( 'getWeatherFeed Spent=%d', (time.time()-t)*1000 )
        t = time.time()
        minifeed_list += self.getZBYYFeed()
        logger.debug( 'getZBYYFeed Spent=%d', (time.time()-t)*1000 )
        t = time.time()

        # 转换image节点 
        clsGetFrontpage.transMiniFeedDataImageNodes( minifeed_list)
        logger.debug( 'transMiniFeedDataImageNodes Spent=%d', (time.time()-t)*1000 )
        t = time.time()

#        first_update_time = 0
#        last_update_time = 0
#        if len(feedid_list) > 0:
#            first_update_time = feedid_list[0][0]
#            last_update_time = feedid_list[-1][0]
        
        output = {}
        output['status'] = 0
        output['msg' ]  = ''
#        output['first_update_time'] = first_update_time
#        output['last_update_time'] = last_update_time
        output['count'] = len( minifeed_list )
        output['lists'] = minifeed_list

        return json.dumps( output, ensure_ascii=False )

    # 得到本地新闻
    def getLocalNewsFeed ( self ):
        logger.debug( 'getLocalNewsFeed, ================================' )

        areas = self.area.split( ',' )[0:2]
        areas.reverse()
        feedid_list = []
        for area in areas :
            feedid_list = feedList.getLocalNewsFeedIdList( area, self.nocache )
            if feedid_list != None and len(feedid_list) > 0 :
                break        

        if feedid_list == None or len( feedid_list ) <= 0 :
            logger.debug( 'getGlobalNewsFeed, no new data...' )
            return []        

        feedid_list.sort( lambda x,y: cmp(y[0],x[0]) )

        update_count = 1+clsGetFrontpage.getFeedListBeginIndexByUpdateTime( feedid_list, self.begin_time, 0 )

        if update_count > 0:
            feedid_list = feedid_list[0:1]
        else:
            logger.debug( 'getGlobalNewsFeed, no new data...' )
            feedid_list = []

        minifeed_list = clsGetFrontpage.getMiniFeeds( feedid_list, self.nocache )

        if len(minifeed_list) > 0 :
            minifeed_list[0]['local'] = 1
            minifeed_list[0]['category'] = 'localNews'        
            minifeed_list[0]['updateNumber'] = update_count
        
        return minifeed_list

    # 得到全国新闻
    def getGlobalNewsFeed ( self ):
        logger.debug( 'getGlobalNewsFeed, ================================' )

        feedid_list  = feedList.getGlobalNewsFeedIdList( self.nocache )
        feedid_list.sort( lambda x,y: cmp(y[0],x[0]) )

        if len( feedid_list ) <= 0 :
            logger.debug( 'getGlobalNewsFeed, no new data...' )
            return []        

        update_count = 1+clsGetFrontpage.getFeedListBeginIndexByUpdateTime( feedid_list, self.begin_time, 0 )

        if update_count > 0:
            feedid_list = feedid_list[0:1]
        else:
            logger.debug( 'getGlobalNewsFeed, no new data...' )
            feedid_list = []

        minifeed_list = clsGetFrontpage.getMiniFeeds( feedid_list, self.nocache )

        if len(minifeed_list) > 0 :
            minifeed_list[0]['local'] = 0
            minifeed_list[0]['category'] = 'topNews'       
            minifeed_list[0]['updateNumber'] = update_count
        
        return minifeed_list

    # 得到今晚看啥
    def getJWKSFeed ( self ):
        logger.debug( 'getJWKSFeed, ================================' )

        feedid_list  = feedList.getGlobalNoNewsFeedIdList( self.nocache )
        feedid_list.sort( lambda x,y: cmp(y[0],x[0]) )

        if len( feedid_list ) <= 0 :
            logger.debug( 'getJWKSFeed, no new data...' )
            return [] 
            
        the_feedid_list = []
        for feedid in feedid_list :
            if feedid[0] <= self.begin_time :
                break

            if feedid[1][0:4] == 'vdeo' :
                the_feedid_list.append( feedid )
                break ;

        minifeed_list = clsGetFrontpage.getMiniFeeds( the_feedid_list, self.nocache )
        return minifeed_list
        
    # 得到天气
    def getWeatherFeed ( self ):
        logger.debug( 'getWeatherFeed, ================================' )

        area = self.nowCity if self.nowCity != '' else self.area
        if area == '' :
            return []
        
        (data, update_time, city) = weather.getLocalWeather( area )
        if data == None or len(data) <= 0 :
            logger.debug( 'getWeatherFeed, no new data...' )
            return []
        
        minifeed = {}
        minifeed['category'] = "localWeather"
        minifeed['updateTime'] = update_time
        minifeed['layout'] = "single"
        minifeed['title'] = "本地天气"
        minifeed['local'] = "1"
        minifeed['area'] = city
        minifeed['feedId'] = "weather_" + str(random.randint(100000000,1000000000))
        minifeed['visibility'] = 1
        minifeed['updateNumber'] = "0"
        minifeed['type'] = "weather"
        minifeed['data'] = data 
    
        return [minifeed]

    # 得到周边影院
    def getZBYYFeed ( self ):
        logger.debug( 'getZBYYFeed, ================================' )
        
        if self.la == '' or self.la == '0' or self.lo == '' or self.lo == '0' :
            return []
        
        data = local_theater.getLocalTheater( self.la, self.lo )
        if data == None or len(data) <= 0:
            return []
        try:
            retMovieId = data[0]["id"]
            retTheaterId1 = str(data[0]["theaters"][0]["id"])
            retTheaterId2 = str(data[0]["theaters"][1]["id"])
        except:
            logger.error("localTheater returned invalid data")
            return []
        if self.movieId == retMovieId and self.theaterId1 == retTheaterId1 and self.theaterId2 == retTheaterId2:
            logger.debug( 'getZBYYFeed, no new data...' )
            return []
        
        minifeed = {}
        minifeed['category'] = "localTheater"
        minifeed['updateTime'] = int(time.time())
        minifeed['layout'] = "single"
        minifeed['area'] = ""
        minifeed['local'] = "1"
        minifeed['title'] = "周边影院热映"
        minifeed['feedId'] = "zbyy_" + str(random.randint(100000000,1000000000))
        minifeed['visibility'] = 1
        minifeed['feed_type'] = "add"
        minifeed['updateNumber'] = 0
        minifeed['type'] = "video"
        minifeed['data'] = data

        return [minifeed]

    # 得到推荐视频
    def getRecommendFeed ( self ):
        logger.debug( 'getRecommendFeed, ================================' )

        (feedid_list, minifeed_list) = feedRecommend.getRecommendFeedList( self.uid, 2, [] )
        if feedid_list == None or minifeed_list == None:
            logger.debug( 'no recommends...' )
            return []
        
        news_minifeed_list = []
        video_minifeed_list = []
        for minifeed in minifeed_list :
            if minifeed['type'].lower() == 'news' :
                minifeed['local'] = 0
                minifeed['category'] = 'recommendNews'
                news_minifeed_list.append( minifeed )
            elif minifeed['type'].lower() == 'video' :
                minifeed['local'] = 0
                minifeed['category'] = 'recommendVideo'
                video_minifeed_list.append( minifeed )
            else:
                logger.debug( 'other type throw.., type=%s', minifeed['type'] )

        return news_minifeed_list[0:1]+video_minifeed_list[0:1]
            

    # 二分法查找update_time的起始位置
    @staticmethod
    def getFeedListBeginIndexByUpdateTime ( feedid_list, update_time, before ):    
        # 向前
        def getBeginIndexByUpdateTime_Before ( feedid_list, sp, ep, update_time ):
            if sp > ep :
                return -1            
            elif sp == ep :
                if update_time > feedid_list[sp][0]:
                    return sp
                else:
                    return sp+1
            elif sp == ep-1 :
                if update_time > feedid_list[sp][0] :
                    return sp
                else:
                    if update_time > feedid_list[ep][0] :
                        return ep
                    else:
                        return ep+1
            else:            
                i = (sp+ep)/2
                if update_time <= feedid_list[i][0] :
                    return getBeginIndexByUpdateTime_Before( feedid_list, i+1, ep, update_time )
                else:
                    return getBeginIndexByUpdateTime_Before( feedid_list, sp, i, update_time )

        # 向后
        def getBeginIndexByUpdateTime_After ( feedid_list, sp, ep, update_time ):
            if sp > ep :
                return -1            
            elif sp == ep :
                if update_time < feedid_list[ep][0]:
                    return ep
                else:
                    return ep-1
            elif sp == ep-1 :
                if update_time < feedid_list[ep][0] :
                    return ep
                else:
                    if update_time < feedid_list[sp][0] :
                        return sp
                    else:
                        return sp-1
            else:            
                i = (sp+ep)/2
                if update_time >= feedid_list[i][0] :
                    return getBeginIndexByUpdateTime_After( feedid_list, sp, i-1, update_time )
                else:
                    return getBeginIndexByUpdateTime_After( feedid_list, i, ep, update_time )
           
        if before:
            return getBeginIndexByUpdateTime_Before( feedid_list, 0, len(feedid_list)-1, update_time )
        else:
            return getBeginIndexByUpdateTime_After( feedid_list, 0, len(feedid_list)-1, update_time )

    # 根据count截取一定得feedid
    @staticmethod
    def getSubFeedIdList ( feedid_list, begin_time, count, before ):
        if count <= 0:
            return []
        
        feedid_count = len(feedid_list)
        s = 0
        e = 0

        if before:
            if begin_time <= 0 :
                s = 0
                e = count
            else:
                s = clsGetFrontpage.getFeedListBeginIndexByUpdateTime( feedid_list, begin_time, before )
                e = s+count
                s = 0 if s < 0 else s
                e = feedid_count if e > feedid_count else e

            # 结尾的相同时间一起返回
            i = e
            for i in xrange( e, feedid_count+1 ) :
                if i == feedid_count or feedid_list[e-1][0] != feedid_list[i][0] :
                    break

            e = i

        else:
            if begin_time <= 0 :
                s = 0
                e = count
            else:
                e = 1+clsGetFrontpage.getFeedListBeginIndexByUpdateTime( feedid_list, begin_time, before )
                s = e-count
                s = 0 if s < 0 else s
                e = feedid_count if e > feedid_count else e
                
            # 结尾的相同时间一起返回
            i = s-1
            for i in xrange( s-1, -2, -1 ) :
                if i == -1 or feedid_list[s][0] != feedid_list[i][0] :
                    break

            s = i+1

        return feedid_list[s:e]
        
    # 取minifeed
    @staticmethod
    def getMiniFeeds ( feedid_list, nocache ):
        # feedid_list 格式为:
        # [[update_time,feedid,dataid,visibile],...]
        # 如果dataid有效，则返回的数据中，要根据dataid对data节点下面的子节点进行过滤
        keys = set([i[1] for i in feedid_list])
        minifeeds = feedContent.getMiniFeeds( keys, nocache )
        minifeeds = feedContent.getMiniFeedsDataContent( minifeeds )
        minifeed_list = []

        for feedid_fds in feedid_list :
            feedid = feedid_fds[1]
            dataid = feedid_fds[2] 
            
            # 取对应的minifeed
            minifeed = minifeeds[feedid]
            if minifeed == None:
                continue

            newMiniFeed = None
            if dataid == '':
                newMiniFeed = minifeed 
            else:
                # 需要根据dataid进行过滤
                newMiniFeed = copy.copy( minifeed )
                newMiniFeed['data']= []
                for minifeed_data_item in minifeed['data'] :
                    if minifeed_data_item.get('id') == dataid :
                        newMiniFeed['data'].append( minifeed_data_item )
                        break

                if len(newMiniFeed['data']) <= 0 :
                    continue
                    
            # 加入到list
            minifeed_list.append( newMiniFeed )

        return minifeed_list

    # 得到minifeed list下面的所有data ids
    @staticmethod
    def getMiniFeedAllDataIds ( minifeed_list ):
        ids = []
        for minifeed in minifeed_list :
            for minifeed_data_item in minifeed['data'] :
                ids.append( minifeed_data_item['id'] )

        print '=========================================='
        print str(ids)
        return ids

    # 转换feed data节点下面的imageData字段
    @staticmethod
    def transMiniFeedDataImageNodes ( minifeed_list ):
        logger.debug( 'transMiniFeedDataImageNodes...' )
        count = 0
        for minifeed in minifeed_list :
            # 对data里面的imageData节点做转换
            for minifeed_data_item in minifeed['data'] :
                clsGetFrontpage.transImageNodes( minifeed_data_item, '', 2 )
                count += 1
        logger.debug( 'transMiniFeedDataImageNodes end, nodes=%d' , count )
            
    # 转换feed data节点下面的imageData字段
    @staticmethod
    def transImageNodes( item, view_type, trans_depth = 3 ):
        # 将imageData节点，替换成image节点
        def imageDataNodeToImageNode ( imageData, view_type ):
            if imageData == None or not isinstance( imageData, dict ) :
                return None
            image = imageData.get( view_type )
            if image == None:
                return imageData.get( 'default' )
            else:
                return image
        #end
        # 将imageData节点，替换成image节点
        def imageDataListNodeToImageListNode ( imageDataList, view_type ):
            if imageDataList == None or not isinstance( imageDataList, list ) :
                return None

            imageList = []
            for imageData in imageDataList :
                image = imageData.get( view_type )
                if image == None:
                    image = imageData.get( 'default' )
                if image != None:
                    imageList.append( image )

            return imageList
        #end

        if not isinstance( item, dict ):
            return
        
        image = imageDataNodeToImageNode( item.get( 'imageData' ), view_type )
        if image != None :
            item['imageData'] = image

        imageList = imageDataListNodeToImageListNode( item.get( 'imageDataList' ), view_type )
        if imageList != None :
            item['imageDataList'] = imageList

        if trans_depth <= 1 :
            return

        for key,value in item.iteritems():
            if not isinstance( value, list ):
                continue
            for list_item in value :
                clsGetFrontpage.transImageNodes( list_item, view_type, trans_depth-1 )
                
