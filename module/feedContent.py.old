#-*- coding: utf8 -*-
import sys
import web
import logging
import logging.config
import json
import conf
import db_cache
import chardet
import urllib
import urllib2
import urlparse
import string

import music_interface
import video_detail
import news_interface

sys.path.append('./module/novel')
import novel_reader as novel_reader

# getLogger
logger = logging.getLogger() 

# 得到minifeeds ，从cache
def getMiniFeeds_FromCache ( feedids ):
    logger.debug( 'getMiniFeeds_FromCache, ids=(%s)', string.join(feedids,',') )

    if len( feedids ) <= 0 :
        return {}
    
    redis = db_cache.get_redis_minifeed()
    if redis == None: # error logging in db_cache
        return None

    keys = []
    for feedid in feedids :
        keys.append( feedid+'_mfeed' )        

    minifeeds = redis.MGet( keys )
    if minifeeds == None :
        logger.error( 'getMiniFeeds_FromCache faild, errno=%d', redis.GetLastErrNo() )
        return None

    result = {}
    index = 0
    for minifeed in minifeeds :
        result[feedids[index]] = minifeed
        #print feedids[index] , len( minifeed )
        index += 1

    return result

# 更新minifeed ，到cache
def updateMiniFeed_ToCache ( feedid, minifeed ):
    redis = db_cache.get_redis_minifeed()
    if redis == None: # error logging in db_cache
        return False

    key = feedid+'_mfeed'
    if not redis.Set( key, minifeed ) :
        logger.error( 'updateMiniFeed_ToCache faild, key=%s, errno=%d', key, redis.GetLastErrNo() )
        return False
        
    return True

# 得到minifeeds ，从DB
def getMiniFeeds_FromDB ( feedids ):
    if len( feedids ) <= 0 :
        return {}
    
    db = db_cache.getdb()
    if db == None: # error logging in db_cache
        return None
    
    result = {}
    strFeedIds = ''
    for feedid in feedids :
        if feedid == '' :
            continue
        
        if strFeedIds != '' :
            strFeedIds += ',' 
        strFeedIds += '\'' + feedid + '\''

    logger.debug( 'getMiniFeeds_FromDB, ids=(%s)', strFeedIds )

    try:
        rs = db.query( 'select feed_id, jsonstr from feed where feed_id in (%s)' % strFeedIds )
        #print 'select feed_id, jsonstr from feed where feed_id in (%s)' % strFeedIds
        for rd in rs :
            result[rd[0]] = rd[1]
            updateMiniFeed_ToCache( rd[0], rd[1] )
    
        return result

    except:
        logger.error( 'getMiniFeeds_FromDB faild, %s', str(sys.exc_info()) )
        return None

# 得到minifeeds
def getMiniFeeds ( feedids, nocache = False ):
    minifeeds = None 
    if not nocache :
        minifeeds = getMiniFeeds_FromCache( feedids )

    no_cache_feedids = []

    if minifeeds == None:
        no_cache_feedids = feedids 
    else:
        for feedid, minifeed in minifeeds.items() :
            if minifeed == '':
                no_cache_feedids.append( feedid )

    minifeeds_db = getMiniFeeds_FromDB( no_cache_feedids )

    if minifeeds == None:
        if minifeeds_db == None :
            return {}
        else:
            return minifeeds_db 
    else:
        if minifeeds_db == None :
            return minifeeds
        else:
            minifeeds.update( minifeeds_db )
            return minifeeds
        
# 从cache 获取feed 的详细内容
def getFeedContent_FromCache ( contId ):
    logger.debug( 'getFeedContent_FromCache, id=%s', contId )

    redis = db_cache.get_redis_feed_content()
    if redis == None: # error logging in db_cache
        return None

    key = contId + '_fc'
    content = redis.Get( key )
    if content == None or content == '' :
        logger.error( "getFeedContent_FromCache, key=%s, err=%d", key, redis.GetLastErrNo() )
        return None
        
    return content

# 保持feed 的详细内容到cache
def updateFeedContent_ToCache ( contId, content ):
    redis = db_cache.get_redis_feed_content()
    if redis == None: # error logging in db_cache
        return False

    key = contId + '_fc'
    if not redis.Set( key, content ) :
        logger.error( 'updateFeedContent_ToCache faild, key=%s, errno=%d', key, redis.GetLastErrNo() )
        return False
        
    return True


# 获取feed 的详细内容
def getFeedContent ( contId, nocache = False ):
    #首先从cache获取内容
    content = None
    if not nocache :
        content = getFeedContent_FromCache( contId )

    if content != None:
        try:
            return json.loads( content, strict=False )
        except:
            logger.error( 'getFeedContent, json load faild, id=%s, err=%s', contId, str(sys.exc_info()) )

    logger.debug( 'getFeedContent from third interface, id=%s', contId )

    # cache没有发现，则调用内容获取接口
    if isinstance( contId, unicode ):
        contId = contId.encode( 'utf8' )
    
    p = contId.find( '_' )
    if p < 0 :
        logger.error( "getFeedContent, id is invalid, id=%s", contId )
        return {}

    cat = contId[0:p]
    srcContId = contId[p+1:]
    content = {}

    if cat == 'news':
        content = news_interface.getNewsContent( srcContId )
    elif cat == 'video' :
        content = video_detail.get_detail_dict( srcContId )
    elif cat == 'music' :
        content = music_interface.Music_interface.Get_music_detail( srcContId )
    elif cat == 'story' :
        novel_reader_obj = novel_reader.NovelReader()
        content = novel_reader_obj.get_novels( [srcContId] )
        content = content.get( srcContId )
        
    if content == None or len(content) == 0 :
        logger.error( "getFeedContent faild, id=%s", contId )
        return {}

    updateFeedContent_ToCache( contId, json.dumps(content) )
    return content
    
# 获取feed 的摘要内容
# 摘要内容会和minifeed一起放到cache，所以不需要再单独cache摘要内容
def getFeedSummary ( contId ):
    logger.debug( 'getFeedSummary from third interface, id=%s', contId )

    # cache没有发现，则调用内容获取接口
    if isinstance( contId, unicode ):
        contId = contId.encode( 'utf8' )

    p = contId.find( '_' )
    if p < 0 :
        logger.error( "getFeedSummary, id is invalid, id=%s", contId )
        return {}

    cat = contId[0:p]
    srcContId = contId[p+1:]
    content = {}

    if cat == 'news':
        #content = getNewsContent( srcContId )
        return {}
    elif cat == 'video' :
        content = video_detail.get_detail_dict( srcContId )
    elif cat == 'music' :
        content = music_interface.Music_interface.Get_music_detail( srcContId )
    elif cat == 'story' :
        novel_reader_obj = novel_reader.NovelReader()
        content = novel_reader_obj.get_novels_meta( [srcContId] )
        content = content.get( srcContId )
        
    if content == None or len(content) == 0 :
        logger.error( "getFeedSummary faild, id=%s", contId )
        return {}

    return content
    
# 获取小说章节内容
def getStoryChapterContent ( contId ):
    # 章节内容有可能会有更新，所以我们本地不做缓存
    logger.debug( 'getStoryChapterContent from third interface, id=%s', contId )

    if isinstance( contId, unicode ):
        contId = contId.encode( 'utf8' )

    novel_reader_obj = novel_reader.NovelReader()
    (ret, content) = novel_reader_obj.get_chapter_content( contId )
    if ret != '2' :
        logger.error( "getStoryChapterContent faild, id=%s, err=%s", contId, ret )
        return ''
        
    return content

if __name__ == '__main__':
    #print getFeedContent( 'music_130762' )
    #print getFeedContent( 'video_130762' )
    #print getFeedContent( 'novel_meta/.紫风铃./春天真的来了' )
    print getFeedContent( 'news_http://psv.tgbus.com/news/201303/20130326143520.shtml' )
